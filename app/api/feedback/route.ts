import { NextRequest, NextResponse } from 'next/server';
import { rateLimit } from '../../utils/rateLimit';

// Danh s√°ch t·ª´ c·∫•m ƒë·ªÉ ch·ªëng spam ƒë∆°n gi·∫£n
const bannedWords = [
  'casino',
  'viagra',
  'xxx',
  'porn',
  'bet',
  'gambling',
  'sportsbet',
  'prescription',
  'lottery'
];

// H√†m ki·ªÉm tra n·ªôi dung spam
function containsBannedWords(text: string): boolean {
  const lowerText = text.toLowerCase();
  return bannedWords.some(word => lowerText.includes(word));
}

// L∆∞u tr·ªØ IP v√† timestamp ƒë·ªÉ ch·ªëng spam
const ipThrottling = new Map<string, number>();
const THROTTLE_TIME = 60000; // 1 ph√∫t gi·ªØa c√°c l·∫ßn g·ª≠i

// Rate limit: 5 requests per hour per IP
const limiter = rateLimit({
  interval: 60 * 60 * 1000, // 1 hour
  uniqueTokenPerInterval: 500, // Max 500 users per hour
  limit: 5, // 5 requests per interval
});

// C·∫•u h√¨nh Telegram - Hardcode ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông
// Th∆∞·ªùng kh√¥ng n√™n hardcode nh∆∞ th·∫ø n√†y, nh∆∞ng ƒë√¢y l√† gi·∫£i ph√°p t·∫°m th·ªùi
const TELEGRAM_BOT_TOKEN = "7410040942:AAFlXTr8oCXwzRlThVpBfwzub2P8Ns7uq34";
const TELEGRAM_CHAT_ID = "6963178872";

export async function POST(request: NextRequest) {
  try {
    // Ki·ªÉm tra rate limit
    const ip = request.ip || request.headers.get('x-forwarded-for') || 'anonymous';
    try {
      await limiter.check(5, ip);
    } catch {
      return NextResponse.json(
        { error: 'Rate limit exceeded. Vui l√≤ng th·ª≠ l·∫°i sau.' },
        { status: 429 }
      );
    }

    // Ki·ªÉm tra gi·ªõi h·∫°n t·∫ßn su·∫•t g·ª≠i
    const lastSendTime = ipThrottling.get(ip);
    const currentTime = Date.now();
    
    if (lastSendTime && (currentTime - lastSendTime) < THROTTLE_TIME) {
      return NextResponse.json(
        { error: 'Vui l√≤ng ƒë·ª£i √≠t nh·∫•t 1 ph√∫t tr∆∞·ªõc khi g·ª≠i g√≥p √Ω ti·∫øp theo' },
        { status: 429 }
      );
    }
    
    // L·∫•y d·ªØ li·ªáu t·ª´ request
    const { feedback, email } = await request.json();
    
    if (!feedback || feedback.trim() === '') {
      return NextResponse.json(
        { error: 'N·ªôi dung g√≥p √Ω kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' },
        { status: 400 }
      );
    }
    
    // Ki·ªÉm tra ƒë·ªô d√†i v√† n·ªôi dung
    if (feedback.length > 1000) {
      return NextResponse.json(
        { error: 'N·ªôi dung g√≥p √Ω kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 1000 k√Ω t·ª±' },
        { status: 400 }
      );
    }
    
    // Ki·ªÉm tra n·ªôi dung spam c∆° b·∫£n
    if (containsBannedWords(feedback)) {
      return NextResponse.json(
        { error: 'N·ªôi dung g√≥p √Ω ch·ª©a t·ª´ kh√¥ng ph√π h·ª£p' },
        { status: 400 }
      );
    }
    
    // Ki·ªÉm tra email
    if (email && typeof email !== 'string') {
      return NextResponse.json(
        { error: 'Email kh√¥ng h·ª£p l·ªá' },
        { status: 400 }
      );
    }
    
    // Chu·∫©n b·ªã g·ª≠i tin nh·∫Øn Telegram
    const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    // Chu·∫©n b·ªã tin nh·∫Øn Telegram
    const emailInfo = email ? `\nEmail: ${email}` : '';
    const message = `üìù *PH·∫¢N H·ªíI M·ªöI*\n\n${feedback}${emailInfo}\n\nIP: ${ip}`;
    
    // G·ª≠i tin nh·∫Øn ƒë·∫øn Telegram
    try {
      console.log('ƒêang g·ª≠i ph·∫£n h·ªìi ƒë·∫øn Telegram:', { feedback, email });
      const response = await fetch(TELEGRAM_API, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: 'Markdown',
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('L·ªói g·ª≠i tin nh·∫Øn Telegram:', errorData);
      } else {
        console.log('ƒê√£ g·ª≠i ph·∫£n h·ªìi th√†nh c√¥ng ƒë·∫øn Telegram');
      }
    } catch (error) {
      console.error('L·ªói k·∫øt n·ªëi Telegram:', error);
      // Ti·∫øp t·ª•c x·ª≠ l√Ω, kh√¥ng l√†m gi√°n ƒëo·∫°n tr·∫£i nghi·ªám ng∆∞·ªùi d√πng
    }
    
    // C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i g·∫ßn nh·∫•t ƒë·ªÉ ch·ªëng spam
    ipThrottling.set(ip, currentTime);
    
    // X√≥a c√°c IP c≈© ƒë·ªÉ tr√°nh memory leak - c√°ch t∆∞∆°ng th√≠ch ES5
    const fiveMinutesAgo = currentTime - 5 * 60 * 1000;
    const ipsToDelete: string[] = [];
    
    // Thu th·∫≠p c√°c IP c·∫ßn x√≥a
    ipThrottling.forEach((timestamp, storedIp) => {
      if (timestamp < fiveMinutesAgo) {
        ipsToDelete.push(storedIp);
      }
    });
    
    // X√≥a c√°c IP c≈©
    ipsToDelete.forEach(ipToDelete => {
      ipThrottling.delete(ipToDelete);
    });
    
    return NextResponse.json({ 
      success: true,
      message: 'C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ph·∫£n h·ªìi!'
    });
  } catch (error) {
    console.error('L·ªói x·ª≠ l√Ω y√™u c·∫ßu g√≥p √Ω:', error);
    
    return NextResponse.json(
      { error: 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.' },
      { status: 500 }
    );
  }
} 